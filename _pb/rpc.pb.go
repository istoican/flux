// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Key
	Value
	Req
	Void
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Key struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Key) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Value struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Value) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Req struct {
	Key   *Key   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *Value `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Req) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Req) GetValue() *Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Key)(nil), "Key")
	proto.RegisterType((*Value)(nil), "Value")
	proto.RegisterType((*Req)(nil), "Req")
	proto.RegisterType((*Void)(nil), "Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPC service

type RPCClient interface {
	Put(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Void, error)
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (RPC_GetClient, error)
}

type rPCClient struct {
	cc *grpc.ClientConn
}

func NewRPCClient(cc *grpc.ClientConn) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) Put(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := grpc.Invoke(ctx, "/RPC/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (RPC_GetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RPC_serviceDesc.Streams[0], c.cc, "/RPC/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPC_GetClient interface {
	Recv() (*Value, error)
	grpc.ClientStream
}

type rPCGetClient struct {
	grpc.ClientStream
}

func (x *rPCGetClient) Recv() (*Value, error) {
	m := new(Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RPC service

type RPCServer interface {
	Put(context.Context, *Req) (*Void, error)
	Get(*Key, RPC_GetServer) error
}

func RegisterRPCServer(s *grpc.Server, srv RPCServer) {
	s.RegisterService(&_RPC_serviceDesc, srv)
}

func _RPC_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Put(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Key)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCServer).Get(m, &rPCGetServer{stream})
}

type RPC_GetServer interface {
	Send(*Value) error
	grpc.ServerStream
}

type rPCGetServer struct {
	grpc.ServerStream
}

func (x *rPCGetServer) Send(m *Value) error {
	return x.ServerStream.SendMsg(m)
}

var _RPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _RPC_Put_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _RPC_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x2c, 0x8e, 0x3f, 0xab, 0xc2, 0x30,
	0x14, 0x47, 0xdb, 0x24, 0x2d, 0xf4, 0xbe, 0xc7, 0x1b, 0x2e, 0x4f, 0x2d, 0xd5, 0x41, 0x32, 0x39,
	0x05, 0xa9, 0x6e, 0x6e, 0x3a, 0x38, 0x74, 0x29, 0x19, 0x3a, 0xb8, 0xb5, 0xe6, 0x0e, 0x45, 0xa1,
	0x7f, 0x68, 0x85, 0x7c, 0x7b, 0x49, 0x74, 0xbb, 0x9c, 0xc3, 0x3d, 0xfc, 0x20, 0x19, 0xfb, 0xbb,
	0xea, 0xc7, 0x6e, 0xea, 0xe4, 0x02, 0x78, 0x41, 0x16, 0xff, 0x80, 0xb5, 0x26, 0x0d, 0xb7, 0xe1,
	0x2e, 0xd1, 0xac, 0x35, 0x72, 0x0d, 0x51, 0x55, 0x3f, 0x67, 0x42, 0x04, 0x61, 0xea, 0xa9, 0xf6,
	0xea, 0x57, 0xfb, 0x5b, 0x9e, 0x80, 0x6b, 0x1a, 0x70, 0x09, 0xfc, 0x41, 0xd6, 0x9b, 0x9f, 0x5c,
	0xa8, 0x82, 0xac, 0x76, 0x00, 0x37, 0x10, 0xbd, 0xdc, 0x6f, 0xca, 0xbc, 0x89, 0x95, 0x2f, 0xe9,
	0x0f, 0x94, 0x31, 0x88, 0xaa, 0x6b, 0x4d, 0x7e, 0x04, 0xae, 0xcb, 0x0b, 0xfe, 0x03, 0x2f, 0xe7,
	0x09, 0x85, 0xd2, 0x34, 0x64, 0x91, 0x72, 0x4a, 0x06, 0xb8, 0x02, 0x7e, 0x25, 0x47, 0x0b, 0xb2,
	0xd9, 0x37, 0x20, 0x83, 0x7d, 0x78, 0x16, 0x37, 0xd6, 0x37, 0x4d, 0xec, 0xb7, 0x1f, 0xde, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x34, 0xa0, 0x2f, 0x27, 0xc8, 0x00, 0x00, 0x00,
}
